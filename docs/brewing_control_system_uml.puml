@startuml

' =================== Web Interface ===================
package "web" {
    class FlaskApp {
      +__init__(comm_layer_terminal)
      +run()
      +index()
      +dashboard()
      +api_status()
      +api_command()
    }

    class WebModule {
      +__init__(comm_layer_terminal)
      +get_system_status()
      +send_command(cmd)
      +format_data_for_display()
    }

    class CommLayerWeb {
      +__init__(comm_layer_terminal)
      +get_system_status()
      +send_command(cmd)
    }
}

' =================== Communication Layer ===================
package "comm_layer" {
    class CommLayerTerminal {
      +__init__(start)
      +command(form: dict)
      +get_status_dict()
      +update()
    }

    class http_comm {
      +__init__(server_config, comm)
      +run()
      +update()
      +listenToServer()
      +fullStatus()
      +escape(s)
    }

    class socket_comm {
      +__init__(host, port, comm_layer_terminal)
      +run()
      +send(data)
      +receive()
    }
    
    class Connection {
      +__init__(msg_queue, socket, conn_closed_callback, comm)
      +send_msg_task()
      +recv_msg_task()
    }

    class Packet {
      +__init__(data)
      +get_packet_size()
      +get_data_size()
      +get_packet()
    }
}

' =================== Terminal ===================
package "terminal" {
    class CommLayerTerminalServer {
      +__init__(comm_layer, host, port)
      +start()
      +stop()
      +handle_client(client_sock)
      +process_command(line)
      +_set_param(param, value)
      +_get_param(param)
      +_simple_command(param, value)
      +_rampup2(temp, minutes)
      +_status()
    }
}

' =================== Controllers ===================
package "controllers" {
    class Pid {
      +__init__(...)
      +calculate(actVal)
      +setSetPoint(setPoint)
      +getSetPoint()
      +getErr()
      +setErr(err)
      +getI_err()
      +setI_err(i_err)
      +getK_p()
      +setK_p(k_p)
      +getK_i()
      +setK_i(k_i)
      +getI_sat_p()
      +setI_sat_p(i_sat_p)
      +getI_sat_n()
      +setI_sat_n(i_sat_n)
      +getCtlSig()
      +setCtlSig(ctlSig)
      +freeze()
      +unfreeze()
      +getFrozen()
    }

    enum Two_point_state {
      IDLE
      HEATING
      COOLING
    }

    class Two_point {
      +__init__(setPoint, hysteresis, dead_time)
      +calculate(actVal)
    }
}

' =================== Sensors and Actuators ===================
package "sensors_actuators" {
    abstract class Sensor {
      +read()
      +get_value()
      +calibrate()
    }

    class dummySensor {
      +__init__(initial_value)
      +read()
      +set_value(value)
    }

    class Ntc {
      +__init__(pin, r_ref)
      +read()
      +calculate_temperature(resistance)
    }

    class PT100 {
      +__init__(device_file)
      +read()
      +read_temp_raw()
    }

    class Interpolate {
      +__init__(x_points, y_points)
      +interpolate(x)
    }

    class Tilt2 {
      +__init__(mac_address)
      +connect()
      +read_gravity()
      +read_temperature()
      +disconnect()
    }

    class Relay_ctrl {
      +__init__(pin, sensor, controller)
      +turn_on()
      +turn_off()
      +is_on()
      +update()
    }

    class Stirrer {
      +__init__(pin, pwm_frequency)
      +set_speed(percent)
      +start()
      +stop()
      +is_running()
    }
}

' =================== Relationships ===================
' Web relationships
FlaskApp --> WebModule : uses
WebModule --> CommLayerWeb : uses
CommLayerWeb --> CommLayerTerminal : uses

' Comm layer relationships
socket_comm --> CommLayerTerminal : uses
http_comm --> CommLayerTerminal : uses
Connection o-- socket_comm : created-by
Packet o-- Connection : used-by

' Terminal relationships
CommLayerTerminalServer o-- CommLayerTerminal : uses

' Controller relationships
Two_point *-- Two_point_state : state

' Sensor relationships
Sensor <|-- PT100
Sensor <|-- Ntc
dummySensor ..|> Sensor : implements
PT100 o-- Interpolate : may use
Ntc o-- Interpolate : may use
Tilt2 -- "Bluetooth/BLE" : uses

' Actuator relationships
Relay_ctrl o-- Sensor : reads temperature
Relay_ctrl o-- Pid : uses control logic
Relay_ctrl o-- Two_point : may use control logic

' Cross-package relationships
CommLayerTerminal --> Pid : may use
CommLayerTerminal --> Two_point : may use
CommLayerTerminal o-- Sensor : uses
CommLayerTerminal o-- Relay_ctrl : controls heater/cooler
CommLayerTerminal o-- Stirrer : controls stirring
CommLayerTerminal o-- Tilt2 : reads gravity/temp

note "Uses dashboard.html, index.html templates" as N1
FlaskApp .. N1

@enduml
